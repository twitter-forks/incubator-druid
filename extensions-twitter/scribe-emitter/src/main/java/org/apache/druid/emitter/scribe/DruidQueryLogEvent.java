/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.druid.emitter.scribe;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2024-10-24")
public class DruidQueryLogEvent implements org.apache.thrift.TBase<DruidQueryLogEvent, DruidQueryLogEvent._Fields>, java.io.Serializable, Cloneable, Comparable<DruidQueryLogEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DruidQueryLogEvent");

  private static final org.apache.thrift.protocol.TField NATIVE_QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("native_query_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SQL_QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_query_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DRUID_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("druid_version", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENVIRONMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("environment", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATACENTER_FIELD_DESC = new org.apache.thrift.protocol.TField("datacenter", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("service_name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REMOTE_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("remote_address", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IS_SQL_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_sql_query", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DATASOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("datasource", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("creation_time", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField EXECUTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("execution_time", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField OUTPUT_RESULT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("output_result_size", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField AUTHENTICATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("authenticator", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField IMPLY_DATA_CUBE_FIELD_DESC = new org.apache.thrift.protocol.TField("imply_data_cube", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField IMPLY_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("imply_feature", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField IMPLY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("imply_user", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField IMPLY_USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("imply_user_email", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField IMPLY_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("imply_view", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField IMPLY_VIEW_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("imply_view_title", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField IMPLY_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("imply_priority", org.apache.thrift.protocol.TType.I32, (short)26);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DruidQueryLogEventStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DruidQueryLogEventTupleSchemeFactory();

  public java.lang.String native_query_id; // required
  public java.lang.String sql_query_id; // optional
  public java.lang.String role; // optional
  public java.lang.String druid_version; // optional
  public java.lang.String environment; // optional
  public java.lang.String datacenter; // optional
  public java.lang.String cluster_name; // optional
  public java.lang.String service_name; // optional
  public java.lang.String host; // optional
  public java.lang.String remote_address; // optional
  public boolean is_sql_query; // required
  public java.lang.String query; // required
  public java.lang.String datasource; // optional
  public boolean success; // required
  public long creation_time; // required
  public long execution_time; // required
  public long output_result_size; // required
  public java.lang.String authenticator; // required
  public java.lang.String stats; // required
  public java.lang.String imply_data_cube; // optional
  public java.lang.String imply_feature; // optional
  public java.lang.String imply_user; // optional
  public java.lang.String imply_user_email; // optional
  public java.lang.String imply_view; // optional
  public java.lang.String imply_view_title; // optional
  public int imply_priority; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NATIVE_QUERY_ID((short)1, "native_query_id"),
    SQL_QUERY_ID((short)2, "sql_query_id"),
    ROLE((short)3, "role"),
    DRUID_VERSION((short)4, "druid_version"),
    ENVIRONMENT((short)5, "environment"),
    DATACENTER((short)6, "datacenter"),
    CLUSTER_NAME((short)7, "cluster_name"),
    SERVICE_NAME((short)8, "service_name"),
    HOST((short)9, "host"),
    REMOTE_ADDRESS((short)10, "remote_address"),
    IS_SQL_QUERY((short)11, "is_sql_query"),
    QUERY((short)12, "query"),
    DATASOURCE((short)13, "datasource"),
    SUCCESS((short)14, "success"),
    CREATION_TIME((short)15, "creation_time"),
    EXECUTION_TIME((short)16, "execution_time"),
    OUTPUT_RESULT_SIZE((short)17, "output_result_size"),
    AUTHENTICATOR((short)18, "authenticator"),
    STATS((short)19, "stats"),
    IMPLY_DATA_CUBE((short)20, "imply_data_cube"),
    IMPLY_FEATURE((short)21, "imply_feature"),
    IMPLY_USER((short)22, "imply_user"),
    IMPLY_USER_EMAIL((short)23, "imply_user_email"),
    IMPLY_VIEW((short)24, "imply_view"),
    IMPLY_VIEW_TITLE((short)25, "imply_view_title"),
    IMPLY_PRIORITY((short)26, "imply_priority");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NATIVE_QUERY_ID
          return NATIVE_QUERY_ID;
        case 2: // SQL_QUERY_ID
          return SQL_QUERY_ID;
        case 3: // ROLE
          return ROLE;
        case 4: // DRUID_VERSION
          return DRUID_VERSION;
        case 5: // ENVIRONMENT
          return ENVIRONMENT;
        case 6: // DATACENTER
          return DATACENTER;
        case 7: // CLUSTER_NAME
          return CLUSTER_NAME;
        case 8: // SERVICE_NAME
          return SERVICE_NAME;
        case 9: // HOST
          return HOST;
        case 10: // REMOTE_ADDRESS
          return REMOTE_ADDRESS;
        case 11: // IS_SQL_QUERY
          return IS_SQL_QUERY;
        case 12: // QUERY
          return QUERY;
        case 13: // DATASOURCE
          return DATASOURCE;
        case 14: // SUCCESS
          return SUCCESS;
        case 15: // CREATION_TIME
          return CREATION_TIME;
        case 16: // EXECUTION_TIME
          return EXECUTION_TIME;
        case 17: // OUTPUT_RESULT_SIZE
          return OUTPUT_RESULT_SIZE;
        case 18: // AUTHENTICATOR
          return AUTHENTICATOR;
        case 19: // STATS
          return STATS;
        case 20: // IMPLY_DATA_CUBE
          return IMPLY_DATA_CUBE;
        case 21: // IMPLY_FEATURE
          return IMPLY_FEATURE;
        case 22: // IMPLY_USER
          return IMPLY_USER;
        case 23: // IMPLY_USER_EMAIL
          return IMPLY_USER_EMAIL;
        case 24: // IMPLY_VIEW
          return IMPLY_VIEW;
        case 25: // IMPLY_VIEW_TITLE
          return IMPLY_VIEW_TITLE;
        case 26: // IMPLY_PRIORITY
          return IMPLY_PRIORITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_SQL_QUERY_ISSET_ID = 0;
  private static final int __SUCCESS_ISSET_ID = 1;
  private static final int __CREATION_TIME_ISSET_ID = 2;
  private static final int __EXECUTION_TIME_ISSET_ID = 3;
  private static final int __OUTPUT_RESULT_SIZE_ISSET_ID = 4;
  private static final int __IMPLY_PRIORITY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SQL_QUERY_ID,_Fields.ROLE,_Fields.DRUID_VERSION,_Fields.ENVIRONMENT,_Fields.DATACENTER,_Fields.CLUSTER_NAME,_Fields.SERVICE_NAME,_Fields.HOST,_Fields.REMOTE_ADDRESS,_Fields.DATASOURCE,_Fields.IMPLY_DATA_CUBE,_Fields.IMPLY_FEATURE,_Fields.IMPLY_USER,_Fields.IMPLY_USER_EMAIL,_Fields.IMPLY_VIEW,_Fields.IMPLY_VIEW_TITLE,_Fields.IMPLY_PRIORITY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NATIVE_QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("native_query_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("sql_query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRUID_VERSION, new org.apache.thrift.meta_data.FieldMetaData("druid_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENVIRONMENT, new org.apache.thrift.meta_data.FieldMetaData("environment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATACENTER, new org.apache.thrift.meta_data.FieldMetaData("datacenter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("cluster_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("service_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("remote_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SQL_QUERY, new org.apache.thrift.meta_data.FieldMetaData("is_sql_query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASOURCE, new org.apache.thrift.meta_data.FieldMetaData("datasource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("creation_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXECUTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("execution_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTPUT_RESULT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("output_result_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTHENTICATOR, new org.apache.thrift.meta_data.FieldMetaData("authenticator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPLY_DATA_CUBE, new org.apache.thrift.meta_data.FieldMetaData("imply_data_cube", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPLY_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("imply_feature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPLY_USER, new org.apache.thrift.meta_data.FieldMetaData("imply_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPLY_USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("imply_user_email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPLY_VIEW, new org.apache.thrift.meta_data.FieldMetaData("imply_view", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPLY_VIEW_TITLE, new org.apache.thrift.meta_data.FieldMetaData("imply_view_title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPLY_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("imply_priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DruidQueryLogEvent.class, metaDataMap);
  }

  public DruidQueryLogEvent() {
  }

  public DruidQueryLogEvent(
    java.lang.String native_query_id,
    boolean is_sql_query,
    java.lang.String query,
    boolean success,
    long creation_time,
    long execution_time,
    long output_result_size,
    java.lang.String authenticator,
    java.lang.String stats)
  {
    this();
    this.native_query_id = native_query_id;
    this.is_sql_query = is_sql_query;
    setIs_sql_queryIsSet(true);
    this.query = query;
    this.success = success;
    setSuccessIsSet(true);
    this.creation_time = creation_time;
    setCreation_timeIsSet(true);
    this.execution_time = execution_time;
    setExecution_timeIsSet(true);
    this.output_result_size = output_result_size;
    setOutput_result_sizeIsSet(true);
    this.authenticator = authenticator;
    this.stats = stats;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DruidQueryLogEvent(DruidQueryLogEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNative_query_id()) {
      this.native_query_id = other.native_query_id;
    }
    if (other.isSetSql_query_id()) {
      this.sql_query_id = other.sql_query_id;
    }
    if (other.isSetRole()) {
      this.role = other.role;
    }
    if (other.isSetDruid_version()) {
      this.druid_version = other.druid_version;
    }
    if (other.isSetEnvironment()) {
      this.environment = other.environment;
    }
    if (other.isSetDatacenter()) {
      this.datacenter = other.datacenter;
    }
    if (other.isSetCluster_name()) {
      this.cluster_name = other.cluster_name;
    }
    if (other.isSetService_name()) {
      this.service_name = other.service_name;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetRemote_address()) {
      this.remote_address = other.remote_address;
    }
    this.is_sql_query = other.is_sql_query;
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetDatasource()) {
      this.datasource = other.datasource;
    }
    this.success = other.success;
    this.creation_time = other.creation_time;
    this.execution_time = other.execution_time;
    this.output_result_size = other.output_result_size;
    if (other.isSetAuthenticator()) {
      this.authenticator = other.authenticator;
    }
    if (other.isSetStats()) {
      this.stats = other.stats;
    }
    if (other.isSetImply_data_cube()) {
      this.imply_data_cube = other.imply_data_cube;
    }
    if (other.isSetImply_feature()) {
      this.imply_feature = other.imply_feature;
    }
    if (other.isSetImply_user()) {
      this.imply_user = other.imply_user;
    }
    if (other.isSetImply_user_email()) {
      this.imply_user_email = other.imply_user_email;
    }
    if (other.isSetImply_view()) {
      this.imply_view = other.imply_view;
    }
    if (other.isSetImply_view_title()) {
      this.imply_view_title = other.imply_view_title;
    }
    this.imply_priority = other.imply_priority;
  }

  public DruidQueryLogEvent deepCopy() {
    return new DruidQueryLogEvent(this);
  }

  @Override
  public void clear() {
    this.native_query_id = null;
    this.sql_query_id = null;
    this.role = null;
    this.druid_version = null;
    this.environment = null;
    this.datacenter = null;
    this.cluster_name = null;
    this.service_name = null;
    this.host = null;
    this.remote_address = null;
    setIs_sql_queryIsSet(false);
    this.is_sql_query = false;
    this.query = null;
    this.datasource = null;
    setSuccessIsSet(false);
    this.success = false;
    setCreation_timeIsSet(false);
    this.creation_time = 0;
    setExecution_timeIsSet(false);
    this.execution_time = 0;
    setOutput_result_sizeIsSet(false);
    this.output_result_size = 0;
    this.authenticator = null;
    this.stats = null;
    this.imply_data_cube = null;
    this.imply_feature = null;
    this.imply_user = null;
    this.imply_user_email = null;
    this.imply_view = null;
    this.imply_view_title = null;
    setImply_priorityIsSet(false);
    this.imply_priority = 0;
  }

  public java.lang.String getNative_query_id() {
    return this.native_query_id;
  }

  public DruidQueryLogEvent setNative_query_id(java.lang.String native_query_id) {
    this.native_query_id = native_query_id;
    return this;
  }

  public void unsetNative_query_id() {
    this.native_query_id = null;
  }

  /** Returns true if field native_query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNative_query_id() {
    return this.native_query_id != null;
  }

  public void setNative_query_idIsSet(boolean value) {
    if (!value) {
      this.native_query_id = null;
    }
  }

  public java.lang.String getSql_query_id() {
    return this.sql_query_id;
  }

  public DruidQueryLogEvent setSql_query_id(java.lang.String sql_query_id) {
    this.sql_query_id = sql_query_id;
    return this;
  }

  public void unsetSql_query_id() {
    this.sql_query_id = null;
  }

  /** Returns true if field sql_query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_query_id() {
    return this.sql_query_id != null;
  }

  public void setSql_query_idIsSet(boolean value) {
    if (!value) {
      this.sql_query_id = null;
    }
  }

  public java.lang.String getRole() {
    return this.role;
  }

  public DruidQueryLogEvent setRole(java.lang.String role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public java.lang.String getDruid_version() {
    return this.druid_version;
  }

  public DruidQueryLogEvent setDruid_version(java.lang.String druid_version) {
    this.druid_version = druid_version;
    return this;
  }

  public void unsetDruid_version() {
    this.druid_version = null;
  }

  /** Returns true if field druid_version is set (has been assigned a value) and false otherwise */
  public boolean isSetDruid_version() {
    return this.druid_version != null;
  }

  public void setDruid_versionIsSet(boolean value) {
    if (!value) {
      this.druid_version = null;
    }
  }

  public java.lang.String getEnvironment() {
    return this.environment;
  }

  public DruidQueryLogEvent setEnvironment(java.lang.String environment) {
    this.environment = environment;
    return this;
  }

  public void unsetEnvironment() {
    this.environment = null;
  }

  /** Returns true if field environment is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvironment() {
    return this.environment != null;
  }

  public void setEnvironmentIsSet(boolean value) {
    if (!value) {
      this.environment = null;
    }
  }

  public java.lang.String getDatacenter() {
    return this.datacenter;
  }

  public DruidQueryLogEvent setDatacenter(java.lang.String datacenter) {
    this.datacenter = datacenter;
    return this;
  }

  public void unsetDatacenter() {
    this.datacenter = null;
  }

  /** Returns true if field datacenter is set (has been assigned a value) and false otherwise */
  public boolean isSetDatacenter() {
    return this.datacenter != null;
  }

  public void setDatacenterIsSet(boolean value) {
    if (!value) {
      this.datacenter = null;
    }
  }

  public java.lang.String getCluster_name() {
    return this.cluster_name;
  }

  public DruidQueryLogEvent setCluster_name(java.lang.String cluster_name) {
    this.cluster_name = cluster_name;
    return this;
  }

  public void unsetCluster_name() {
    this.cluster_name = null;
  }

  /** Returns true if field cluster_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster_name() {
    return this.cluster_name != null;
  }

  public void setCluster_nameIsSet(boolean value) {
    if (!value) {
      this.cluster_name = null;
    }
  }

  public java.lang.String getService_name() {
    return this.service_name;
  }

  public DruidQueryLogEvent setService_name(java.lang.String service_name) {
    this.service_name = service_name;
    return this;
  }

  public void unsetService_name() {
    this.service_name = null;
  }

  /** Returns true if field service_name is set (has been assigned a value) and false otherwise */
  public boolean isSetService_name() {
    return this.service_name != null;
  }

  public void setService_nameIsSet(boolean value) {
    if (!value) {
      this.service_name = null;
    }
  }

  public java.lang.String getHost() {
    return this.host;
  }

  public DruidQueryLogEvent setHost(java.lang.String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public java.lang.String getRemote_address() {
    return this.remote_address;
  }

  public DruidQueryLogEvent setRemote_address(java.lang.String remote_address) {
    this.remote_address = remote_address;
    return this;
  }

  public void unsetRemote_address() {
    this.remote_address = null;
  }

  /** Returns true if field remote_address is set (has been assigned a value) and false otherwise */
  public boolean isSetRemote_address() {
    return this.remote_address != null;
  }

  public void setRemote_addressIsSet(boolean value) {
    if (!value) {
      this.remote_address = null;
    }
  }

  public boolean isIs_sql_query() {
    return this.is_sql_query;
  }

  public DruidQueryLogEvent setIs_sql_query(boolean is_sql_query) {
    this.is_sql_query = is_sql_query;
    setIs_sql_queryIsSet(true);
    return this;
  }

  public void unsetIs_sql_query() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_SQL_QUERY_ISSET_ID);
  }

  /** Returns true if field is_sql_query is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_sql_query() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_SQL_QUERY_ISSET_ID);
  }

  public void setIs_sql_queryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_SQL_QUERY_ISSET_ID, value);
  }

  public java.lang.String getQuery() {
    return this.query;
  }

  public DruidQueryLogEvent setQuery(java.lang.String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public java.lang.String getDatasource() {
    return this.datasource;
  }

  public DruidQueryLogEvent setDatasource(java.lang.String datasource) {
    this.datasource = datasource;
    return this;
  }

  public void unsetDatasource() {
    this.datasource = null;
  }

  /** Returns true if field datasource is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasource() {
    return this.datasource != null;
  }

  public void setDatasourceIsSet(boolean value) {
    if (!value) {
      this.datasource = null;
    }
  }

  public boolean isSuccess() {
    return this.success;
  }

  public DruidQueryLogEvent setSuccess(boolean success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
  }

  public long getCreation_time() {
    return this.creation_time;
  }

  public DruidQueryLogEvent setCreation_time(long creation_time) {
    this.creation_time = creation_time;
    setCreation_timeIsSet(true);
    return this;
  }

  public void unsetCreation_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATION_TIME_ISSET_ID);
  }

  /** Returns true if field creation_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreation_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATION_TIME_ISSET_ID);
  }

  public void setCreation_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATION_TIME_ISSET_ID, value);
  }

  public long getExecution_time() {
    return this.execution_time;
  }

  public DruidQueryLogEvent setExecution_time(long execution_time) {
    this.execution_time = execution_time;
    setExecution_timeIsSet(true);
    return this;
  }

  public void unsetExecution_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTION_TIME_ISSET_ID);
  }

  /** Returns true if field execution_time is set (has been assigned a value) and false otherwise */
  public boolean isSetExecution_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTION_TIME_ISSET_ID);
  }

  public void setExecution_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTION_TIME_ISSET_ID, value);
  }

  public long getOutput_result_size() {
    return this.output_result_size;
  }

  public DruidQueryLogEvent setOutput_result_size(long output_result_size) {
    this.output_result_size = output_result_size;
    setOutput_result_sizeIsSet(true);
    return this;
  }

  public void unsetOutput_result_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_RESULT_SIZE_ISSET_ID);
  }

  /** Returns true if field output_result_size is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_result_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_RESULT_SIZE_ISSET_ID);
  }

  public void setOutput_result_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_RESULT_SIZE_ISSET_ID, value);
  }

  public java.lang.String getAuthenticator() {
    return this.authenticator;
  }

  public DruidQueryLogEvent setAuthenticator(java.lang.String authenticator) {
    this.authenticator = authenticator;
    return this;
  }

  public void unsetAuthenticator() {
    this.authenticator = null;
  }

  /** Returns true if field authenticator is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthenticator() {
    return this.authenticator != null;
  }

  public void setAuthenticatorIsSet(boolean value) {
    if (!value) {
      this.authenticator = null;
    }
  }

  public java.lang.String getStats() {
    return this.stats;
  }

  public DruidQueryLogEvent setStats(java.lang.String stats) {
    this.stats = stats;
    return this;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public java.lang.String getImply_data_cube() {
    return this.imply_data_cube;
  }

  public DruidQueryLogEvent setImply_data_cube(java.lang.String imply_data_cube) {
    this.imply_data_cube = imply_data_cube;
    return this;
  }

  public void unsetImply_data_cube() {
    this.imply_data_cube = null;
  }

  /** Returns true if field imply_data_cube is set (has been assigned a value) and false otherwise */
  public boolean isSetImply_data_cube() {
    return this.imply_data_cube != null;
  }

  public void setImply_data_cubeIsSet(boolean value) {
    if (!value) {
      this.imply_data_cube = null;
    }
  }

  public java.lang.String getImply_feature() {
    return this.imply_feature;
  }

  public DruidQueryLogEvent setImply_feature(java.lang.String imply_feature) {
    this.imply_feature = imply_feature;
    return this;
  }

  public void unsetImply_feature() {
    this.imply_feature = null;
  }

  /** Returns true if field imply_feature is set (has been assigned a value) and false otherwise */
  public boolean isSetImply_feature() {
    return this.imply_feature != null;
  }

  public void setImply_featureIsSet(boolean value) {
    if (!value) {
      this.imply_feature = null;
    }
  }

  public java.lang.String getImply_user() {
    return this.imply_user;
  }

  public DruidQueryLogEvent setImply_user(java.lang.String imply_user) {
    this.imply_user = imply_user;
    return this;
  }

  public void unsetImply_user() {
    this.imply_user = null;
  }

  /** Returns true if field imply_user is set (has been assigned a value) and false otherwise */
  public boolean isSetImply_user() {
    return this.imply_user != null;
  }

  public void setImply_userIsSet(boolean value) {
    if (!value) {
      this.imply_user = null;
    }
  }

  public java.lang.String getImply_user_email() {
    return this.imply_user_email;
  }

  public DruidQueryLogEvent setImply_user_email(java.lang.String imply_user_email) {
    this.imply_user_email = imply_user_email;
    return this;
  }

  public void unsetImply_user_email() {
    this.imply_user_email = null;
  }

  /** Returns true if field imply_user_email is set (has been assigned a value) and false otherwise */
  public boolean isSetImply_user_email() {
    return this.imply_user_email != null;
  }

  public void setImply_user_emailIsSet(boolean value) {
    if (!value) {
      this.imply_user_email = null;
    }
  }

  public java.lang.String getImply_view() {
    return this.imply_view;
  }

  public DruidQueryLogEvent setImply_view(java.lang.String imply_view) {
    this.imply_view = imply_view;
    return this;
  }

  public void unsetImply_view() {
    this.imply_view = null;
  }

  /** Returns true if field imply_view is set (has been assigned a value) and false otherwise */
  public boolean isSetImply_view() {
    return this.imply_view != null;
  }

  public void setImply_viewIsSet(boolean value) {
    if (!value) {
      this.imply_view = null;
    }
  }

  public java.lang.String getImply_view_title() {
    return this.imply_view_title;
  }

  public DruidQueryLogEvent setImply_view_title(java.lang.String imply_view_title) {
    this.imply_view_title = imply_view_title;
    return this;
  }

  public void unsetImply_view_title() {
    this.imply_view_title = null;
  }

  /** Returns true if field imply_view_title is set (has been assigned a value) and false otherwise */
  public boolean isSetImply_view_title() {
    return this.imply_view_title != null;
  }

  public void setImply_view_titleIsSet(boolean value) {
    if (!value) {
      this.imply_view_title = null;
    }
  }

  public int getImply_priority() {
    return this.imply_priority;
  }

  public DruidQueryLogEvent setImply_priority(int imply_priority) {
    this.imply_priority = imply_priority;
    setImply_priorityIsSet(true);
    return this;
  }

  public void unsetImply_priority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMPLY_PRIORITY_ISSET_ID);
  }

  /** Returns true if field imply_priority is set (has been assigned a value) and false otherwise */
  public boolean isSetImply_priority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMPLY_PRIORITY_ISSET_ID);
  }

  public void setImply_priorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMPLY_PRIORITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NATIVE_QUERY_ID:
      if (value == null) {
        unsetNative_query_id();
      } else {
        setNative_query_id((java.lang.String)value);
      }
      break;

    case SQL_QUERY_ID:
      if (value == null) {
        unsetSql_query_id();
      } else {
        setSql_query_id((java.lang.String)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((java.lang.String)value);
      }
      break;

    case DRUID_VERSION:
      if (value == null) {
        unsetDruid_version();
      } else {
        setDruid_version((java.lang.String)value);
      }
      break;

    case ENVIRONMENT:
      if (value == null) {
        unsetEnvironment();
      } else {
        setEnvironment((java.lang.String)value);
      }
      break;

    case DATACENTER:
      if (value == null) {
        unsetDatacenter();
      } else {
        setDatacenter((java.lang.String)value);
      }
      break;

    case CLUSTER_NAME:
      if (value == null) {
        unsetCluster_name();
      } else {
        setCluster_name((java.lang.String)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetService_name();
      } else {
        setService_name((java.lang.String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((java.lang.String)value);
      }
      break;

    case REMOTE_ADDRESS:
      if (value == null) {
        unsetRemote_address();
      } else {
        setRemote_address((java.lang.String)value);
      }
      break;

    case IS_SQL_QUERY:
      if (value == null) {
        unsetIs_sql_query();
      } else {
        setIs_sql_query((java.lang.Boolean)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((java.lang.String)value);
      }
      break;

    case DATASOURCE:
      if (value == null) {
        unsetDatasource();
      } else {
        setDatasource((java.lang.String)value);
      }
      break;

    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((java.lang.Boolean)value);
      }
      break;

    case CREATION_TIME:
      if (value == null) {
        unsetCreation_time();
      } else {
        setCreation_time((java.lang.Long)value);
      }
      break;

    case EXECUTION_TIME:
      if (value == null) {
        unsetExecution_time();
      } else {
        setExecution_time((java.lang.Long)value);
      }
      break;

    case OUTPUT_RESULT_SIZE:
      if (value == null) {
        unsetOutput_result_size();
      } else {
        setOutput_result_size((java.lang.Long)value);
      }
      break;

    case AUTHENTICATOR:
      if (value == null) {
        unsetAuthenticator();
      } else {
        setAuthenticator((java.lang.String)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((java.lang.String)value);
      }
      break;

    case IMPLY_DATA_CUBE:
      if (value == null) {
        unsetImply_data_cube();
      } else {
        setImply_data_cube((java.lang.String)value);
      }
      break;

    case IMPLY_FEATURE:
      if (value == null) {
        unsetImply_feature();
      } else {
        setImply_feature((java.lang.String)value);
      }
      break;

    case IMPLY_USER:
      if (value == null) {
        unsetImply_user();
      } else {
        setImply_user((java.lang.String)value);
      }
      break;

    case IMPLY_USER_EMAIL:
      if (value == null) {
        unsetImply_user_email();
      } else {
        setImply_user_email((java.lang.String)value);
      }
      break;

    case IMPLY_VIEW:
      if (value == null) {
        unsetImply_view();
      } else {
        setImply_view((java.lang.String)value);
      }
      break;

    case IMPLY_VIEW_TITLE:
      if (value == null) {
        unsetImply_view_title();
      } else {
        setImply_view_title((java.lang.String)value);
      }
      break;

    case IMPLY_PRIORITY:
      if (value == null) {
        unsetImply_priority();
      } else {
        setImply_priority((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NATIVE_QUERY_ID:
      return getNative_query_id();

    case SQL_QUERY_ID:
      return getSql_query_id();

    case ROLE:
      return getRole();

    case DRUID_VERSION:
      return getDruid_version();

    case ENVIRONMENT:
      return getEnvironment();

    case DATACENTER:
      return getDatacenter();

    case CLUSTER_NAME:
      return getCluster_name();

    case SERVICE_NAME:
      return getService_name();

    case HOST:
      return getHost();

    case REMOTE_ADDRESS:
      return getRemote_address();

    case IS_SQL_QUERY:
      return isIs_sql_query();

    case QUERY:
      return getQuery();

    case DATASOURCE:
      return getDatasource();

    case SUCCESS:
      return isSuccess();

    case CREATION_TIME:
      return getCreation_time();

    case EXECUTION_TIME:
      return getExecution_time();

    case OUTPUT_RESULT_SIZE:
      return getOutput_result_size();

    case AUTHENTICATOR:
      return getAuthenticator();

    case STATS:
      return getStats();

    case IMPLY_DATA_CUBE:
      return getImply_data_cube();

    case IMPLY_FEATURE:
      return getImply_feature();

    case IMPLY_USER:
      return getImply_user();

    case IMPLY_USER_EMAIL:
      return getImply_user_email();

    case IMPLY_VIEW:
      return getImply_view();

    case IMPLY_VIEW_TITLE:
      return getImply_view_title();

    case IMPLY_PRIORITY:
      return getImply_priority();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NATIVE_QUERY_ID:
      return isSetNative_query_id();
    case SQL_QUERY_ID:
      return isSetSql_query_id();
    case ROLE:
      return isSetRole();
    case DRUID_VERSION:
      return isSetDruid_version();
    case ENVIRONMENT:
      return isSetEnvironment();
    case DATACENTER:
      return isSetDatacenter();
    case CLUSTER_NAME:
      return isSetCluster_name();
    case SERVICE_NAME:
      return isSetService_name();
    case HOST:
      return isSetHost();
    case REMOTE_ADDRESS:
      return isSetRemote_address();
    case IS_SQL_QUERY:
      return isSetIs_sql_query();
    case QUERY:
      return isSetQuery();
    case DATASOURCE:
      return isSetDatasource();
    case SUCCESS:
      return isSetSuccess();
    case CREATION_TIME:
      return isSetCreation_time();
    case EXECUTION_TIME:
      return isSetExecution_time();
    case OUTPUT_RESULT_SIZE:
      return isSetOutput_result_size();
    case AUTHENTICATOR:
      return isSetAuthenticator();
    case STATS:
      return isSetStats();
    case IMPLY_DATA_CUBE:
      return isSetImply_data_cube();
    case IMPLY_FEATURE:
      return isSetImply_feature();
    case IMPLY_USER:
      return isSetImply_user();
    case IMPLY_USER_EMAIL:
      return isSetImply_user_email();
    case IMPLY_VIEW:
      return isSetImply_view();
    case IMPLY_VIEW_TITLE:
      return isSetImply_view_title();
    case IMPLY_PRIORITY:
      return isSetImply_priority();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DruidQueryLogEvent)
      return this.equals((DruidQueryLogEvent)that);
    return false;
  }

  public boolean equals(DruidQueryLogEvent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_native_query_id = true && this.isSetNative_query_id();
    boolean that_present_native_query_id = true && that.isSetNative_query_id();
    if (this_present_native_query_id || that_present_native_query_id) {
      if (!(this_present_native_query_id && that_present_native_query_id))
        return false;
      if (!this.native_query_id.equals(that.native_query_id))
        return false;
    }

    boolean this_present_sql_query_id = true && this.isSetSql_query_id();
    boolean that_present_sql_query_id = true && that.isSetSql_query_id();
    if (this_present_sql_query_id || that_present_sql_query_id) {
      if (!(this_present_sql_query_id && that_present_sql_query_id))
        return false;
      if (!this.sql_query_id.equals(that.sql_query_id))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_druid_version = true && this.isSetDruid_version();
    boolean that_present_druid_version = true && that.isSetDruid_version();
    if (this_present_druid_version || that_present_druid_version) {
      if (!(this_present_druid_version && that_present_druid_version))
        return false;
      if (!this.druid_version.equals(that.druid_version))
        return false;
    }

    boolean this_present_environment = true && this.isSetEnvironment();
    boolean that_present_environment = true && that.isSetEnvironment();
    if (this_present_environment || that_present_environment) {
      if (!(this_present_environment && that_present_environment))
        return false;
      if (!this.environment.equals(that.environment))
        return false;
    }

    boolean this_present_datacenter = true && this.isSetDatacenter();
    boolean that_present_datacenter = true && that.isSetDatacenter();
    if (this_present_datacenter || that_present_datacenter) {
      if (!(this_present_datacenter && that_present_datacenter))
        return false;
      if (!this.datacenter.equals(that.datacenter))
        return false;
    }

    boolean this_present_cluster_name = true && this.isSetCluster_name();
    boolean that_present_cluster_name = true && that.isSetCluster_name();
    if (this_present_cluster_name || that_present_cluster_name) {
      if (!(this_present_cluster_name && that_present_cluster_name))
        return false;
      if (!this.cluster_name.equals(that.cluster_name))
        return false;
    }

    boolean this_present_service_name = true && this.isSetService_name();
    boolean that_present_service_name = true && that.isSetService_name();
    if (this_present_service_name || that_present_service_name) {
      if (!(this_present_service_name && that_present_service_name))
        return false;
      if (!this.service_name.equals(that.service_name))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_remote_address = true && this.isSetRemote_address();
    boolean that_present_remote_address = true && that.isSetRemote_address();
    if (this_present_remote_address || that_present_remote_address) {
      if (!(this_present_remote_address && that_present_remote_address))
        return false;
      if (!this.remote_address.equals(that.remote_address))
        return false;
    }

    boolean this_present_is_sql_query = true;
    boolean that_present_is_sql_query = true;
    if (this_present_is_sql_query || that_present_is_sql_query) {
      if (!(this_present_is_sql_query && that_present_is_sql_query))
        return false;
      if (this.is_sql_query != that.is_sql_query)
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_datasource = true && this.isSetDatasource();
    boolean that_present_datasource = true && that.isSetDatasource();
    if (this_present_datasource || that_present_datasource) {
      if (!(this_present_datasource && that_present_datasource))
        return false;
      if (!this.datasource.equals(that.datasource))
        return false;
    }

    boolean this_present_success = true;
    boolean that_present_success = true;
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    boolean this_present_creation_time = true;
    boolean that_present_creation_time = true;
    if (this_present_creation_time || that_present_creation_time) {
      if (!(this_present_creation_time && that_present_creation_time))
        return false;
      if (this.creation_time != that.creation_time)
        return false;
    }

    boolean this_present_execution_time = true;
    boolean that_present_execution_time = true;
    if (this_present_execution_time || that_present_execution_time) {
      if (!(this_present_execution_time && that_present_execution_time))
        return false;
      if (this.execution_time != that.execution_time)
        return false;
    }

    boolean this_present_output_result_size = true;
    boolean that_present_output_result_size = true;
    if (this_present_output_result_size || that_present_output_result_size) {
      if (!(this_present_output_result_size && that_present_output_result_size))
        return false;
      if (this.output_result_size != that.output_result_size)
        return false;
    }

    boolean this_present_authenticator = true && this.isSetAuthenticator();
    boolean that_present_authenticator = true && that.isSetAuthenticator();
    if (this_present_authenticator || that_present_authenticator) {
      if (!(this_present_authenticator && that_present_authenticator))
        return false;
      if (!this.authenticator.equals(that.authenticator))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_imply_data_cube = true && this.isSetImply_data_cube();
    boolean that_present_imply_data_cube = true && that.isSetImply_data_cube();
    if (this_present_imply_data_cube || that_present_imply_data_cube) {
      if (!(this_present_imply_data_cube && that_present_imply_data_cube))
        return false;
      if (!this.imply_data_cube.equals(that.imply_data_cube))
        return false;
    }

    boolean this_present_imply_feature = true && this.isSetImply_feature();
    boolean that_present_imply_feature = true && that.isSetImply_feature();
    if (this_present_imply_feature || that_present_imply_feature) {
      if (!(this_present_imply_feature && that_present_imply_feature))
        return false;
      if (!this.imply_feature.equals(that.imply_feature))
        return false;
    }

    boolean this_present_imply_user = true && this.isSetImply_user();
    boolean that_present_imply_user = true && that.isSetImply_user();
    if (this_present_imply_user || that_present_imply_user) {
      if (!(this_present_imply_user && that_present_imply_user))
        return false;
      if (!this.imply_user.equals(that.imply_user))
        return false;
    }

    boolean this_present_imply_user_email = true && this.isSetImply_user_email();
    boolean that_present_imply_user_email = true && that.isSetImply_user_email();
    if (this_present_imply_user_email || that_present_imply_user_email) {
      if (!(this_present_imply_user_email && that_present_imply_user_email))
        return false;
      if (!this.imply_user_email.equals(that.imply_user_email))
        return false;
    }

    boolean this_present_imply_view = true && this.isSetImply_view();
    boolean that_present_imply_view = true && that.isSetImply_view();
    if (this_present_imply_view || that_present_imply_view) {
      if (!(this_present_imply_view && that_present_imply_view))
        return false;
      if (!this.imply_view.equals(that.imply_view))
        return false;
    }

    boolean this_present_imply_view_title = true && this.isSetImply_view_title();
    boolean that_present_imply_view_title = true && that.isSetImply_view_title();
    if (this_present_imply_view_title || that_present_imply_view_title) {
      if (!(this_present_imply_view_title && that_present_imply_view_title))
        return false;
      if (!this.imply_view_title.equals(that.imply_view_title))
        return false;
    }

    boolean this_present_imply_priority = true && this.isSetImply_priority();
    boolean that_present_imply_priority = true && that.isSetImply_priority();
    if (this_present_imply_priority || that_present_imply_priority) {
      if (!(this_present_imply_priority && that_present_imply_priority))
        return false;
      if (this.imply_priority != that.imply_priority)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNative_query_id()) ? 131071 : 524287);
    if (isSetNative_query_id())
      hashCode = hashCode * 8191 + native_query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_query_id()) ? 131071 : 524287);
    if (isSetSql_query_id())
      hashCode = hashCode * 8191 + sql_query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
    if (isSetRole())
      hashCode = hashCode * 8191 + role.hashCode();

    hashCode = hashCode * 8191 + ((isSetDruid_version()) ? 131071 : 524287);
    if (isSetDruid_version())
      hashCode = hashCode * 8191 + druid_version.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnvironment()) ? 131071 : 524287);
    if (isSetEnvironment())
      hashCode = hashCode * 8191 + environment.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatacenter()) ? 131071 : 524287);
    if (isSetDatacenter())
      hashCode = hashCode * 8191 + datacenter.hashCode();

    hashCode = hashCode * 8191 + ((isSetCluster_name()) ? 131071 : 524287);
    if (isSetCluster_name())
      hashCode = hashCode * 8191 + cluster_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetService_name()) ? 131071 : 524287);
    if (isSetService_name())
      hashCode = hashCode * 8191 + service_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemote_address()) ? 131071 : 524287);
    if (isSetRemote_address())
      hashCode = hashCode * 8191 + remote_address.hashCode();

    hashCode = hashCode * 8191 + ((is_sql_query) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
    if (isSetQuery())
      hashCode = hashCode * 8191 + query.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatasource()) ? 131071 : 524287);
    if (isSetDatasource())
      hashCode = hashCode * 8191 + datasource.hashCode();

    hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(creation_time);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(execution_time);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(output_result_size);

    hashCode = hashCode * 8191 + ((isSetAuthenticator()) ? 131071 : 524287);
    if (isSetAuthenticator())
      hashCode = hashCode * 8191 + authenticator.hashCode();

    hashCode = hashCode * 8191 + ((isSetStats()) ? 131071 : 524287);
    if (isSetStats())
      hashCode = hashCode * 8191 + stats.hashCode();

    hashCode = hashCode * 8191 + ((isSetImply_data_cube()) ? 131071 : 524287);
    if (isSetImply_data_cube())
      hashCode = hashCode * 8191 + imply_data_cube.hashCode();

    hashCode = hashCode * 8191 + ((isSetImply_feature()) ? 131071 : 524287);
    if (isSetImply_feature())
      hashCode = hashCode * 8191 + imply_feature.hashCode();

    hashCode = hashCode * 8191 + ((isSetImply_user()) ? 131071 : 524287);
    if (isSetImply_user())
      hashCode = hashCode * 8191 + imply_user.hashCode();

    hashCode = hashCode * 8191 + ((isSetImply_user_email()) ? 131071 : 524287);
    if (isSetImply_user_email())
      hashCode = hashCode * 8191 + imply_user_email.hashCode();

    hashCode = hashCode * 8191 + ((isSetImply_view()) ? 131071 : 524287);
    if (isSetImply_view())
      hashCode = hashCode * 8191 + imply_view.hashCode();

    hashCode = hashCode * 8191 + ((isSetImply_view_title()) ? 131071 : 524287);
    if (isSetImply_view_title())
      hashCode = hashCode * 8191 + imply_view_title.hashCode();

    hashCode = hashCode * 8191 + ((isSetImply_priority()) ? 131071 : 524287);
    if (isSetImply_priority())
      hashCode = hashCode * 8191 + imply_priority;

    return hashCode;
  }

  @Override
  public int compareTo(DruidQueryLogEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNative_query_id()).compareTo(other.isSetNative_query_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNative_query_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.native_query_id, other.native_query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSql_query_id()).compareTo(other.isSetSql_query_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_query_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_query_id, other.sql_query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDruid_version()).compareTo(other.isSetDruid_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDruid_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.druid_version, other.druid_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnvironment()).compareTo(other.isSetEnvironment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvironment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.environment, other.environment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatacenter()).compareTo(other.isSetDatacenter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatacenter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datacenter, other.datacenter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCluster_name()).compareTo(other.isSetCluster_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster_name, other.cluster_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetService_name()).compareTo(other.isSetService_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.service_name, other.service_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemote_address()).compareTo(other.isSetRemote_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemote_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remote_address, other.remote_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_sql_query()).compareTo(other.isSetIs_sql_query());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_sql_query()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_sql_query, other.is_sql_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatasource()).compareTo(other.isSetDatasource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasource, other.datasource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreation_time()).compareTo(other.isSetCreation_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreation_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creation_time, other.creation_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecution_time()).compareTo(other.isSetExecution_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecution_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execution_time, other.execution_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutput_result_size()).compareTo(other.isSetOutput_result_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_result_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_result_size, other.output_result_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthenticator()).compareTo(other.isSetAuthenticator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthenticator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authenticator, other.authenticator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImply_data_cube()).compareTo(other.isSetImply_data_cube());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImply_data_cube()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imply_data_cube, other.imply_data_cube);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImply_feature()).compareTo(other.isSetImply_feature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImply_feature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imply_feature, other.imply_feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImply_user()).compareTo(other.isSetImply_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImply_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imply_user, other.imply_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImply_user_email()).compareTo(other.isSetImply_user_email());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImply_user_email()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imply_user_email, other.imply_user_email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImply_view()).compareTo(other.isSetImply_view());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImply_view()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imply_view, other.imply_view);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImply_view_title()).compareTo(other.isSetImply_view_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImply_view_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imply_view_title, other.imply_view_title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImply_priority()).compareTo(other.isSetImply_priority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImply_priority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imply_priority, other.imply_priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DruidQueryLogEvent(");
    boolean first = true;

    sb.append("native_query_id:");
    if (this.native_query_id == null) {
      sb.append("null");
    } else {
      sb.append(this.native_query_id);
    }
    first = false;
    if (isSetSql_query_id()) {
      if (!first) sb.append(", ");
      sb.append("sql_query_id:");
      if (this.sql_query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_query_id);
      }
      first = false;
    }
    if (isSetRole()) {
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
    }
    if (isSetDruid_version()) {
      if (!first) sb.append(", ");
      sb.append("druid_version:");
      if (this.druid_version == null) {
        sb.append("null");
      } else {
        sb.append(this.druid_version);
      }
      first = false;
    }
    if (isSetEnvironment()) {
      if (!first) sb.append(", ");
      sb.append("environment:");
      if (this.environment == null) {
        sb.append("null");
      } else {
        sb.append(this.environment);
      }
      first = false;
    }
    if (isSetDatacenter()) {
      if (!first) sb.append(", ");
      sb.append("datacenter:");
      if (this.datacenter == null) {
        sb.append("null");
      } else {
        sb.append(this.datacenter);
      }
      first = false;
    }
    if (isSetCluster_name()) {
      if (!first) sb.append(", ");
      sb.append("cluster_name:");
      if (this.cluster_name == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster_name);
      }
      first = false;
    }
    if (isSetService_name()) {
      if (!first) sb.append(", ");
      sb.append("service_name:");
      if (this.service_name == null) {
        sb.append("null");
      } else {
        sb.append(this.service_name);
      }
      first = false;
    }
    if (isSetHost()) {
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
    }
    if (isSetRemote_address()) {
      if (!first) sb.append(", ");
      sb.append("remote_address:");
      if (this.remote_address == null) {
        sb.append("null");
      } else {
        sb.append(this.remote_address);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("is_sql_query:");
    sb.append(this.is_sql_query);
    first = false;
    if (!first) sb.append(", ");
    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (isSetDatasource()) {
      if (!first) sb.append(", ");
      sb.append("datasource:");
      if (this.datasource == null) {
        sb.append("null");
      } else {
        sb.append(this.datasource);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("success:");
    sb.append(this.success);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creation_time:");
    sb.append(this.creation_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("execution_time:");
    sb.append(this.execution_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_result_size:");
    sb.append(this.output_result_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authenticator:");
    if (this.authenticator == null) {
      sb.append("null");
    } else {
      sb.append(this.authenticator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stats:");
    if (this.stats == null) {
      sb.append("null");
    } else {
      sb.append(this.stats);
    }
    first = false;
    if (isSetImply_data_cube()) {
      if (!first) sb.append(", ");
      sb.append("imply_data_cube:");
      if (this.imply_data_cube == null) {
        sb.append("null");
      } else {
        sb.append(this.imply_data_cube);
      }
      first = false;
    }
    if (isSetImply_feature()) {
      if (!first) sb.append(", ");
      sb.append("imply_feature:");
      if (this.imply_feature == null) {
        sb.append("null");
      } else {
        sb.append(this.imply_feature);
      }
      first = false;
    }
    if (isSetImply_user()) {
      if (!first) sb.append(", ");
      sb.append("imply_user:");
      if (this.imply_user == null) {
        sb.append("null");
      } else {
        sb.append(this.imply_user);
      }
      first = false;
    }
    if (isSetImply_user_email()) {
      if (!first) sb.append(", ");
      sb.append("imply_user_email:");
      if (this.imply_user_email == null) {
        sb.append("null");
      } else {
        sb.append(this.imply_user_email);
      }
      first = false;
    }
    if (isSetImply_view()) {
      if (!first) sb.append(", ");
      sb.append("imply_view:");
      if (this.imply_view == null) {
        sb.append("null");
      } else {
        sb.append(this.imply_view);
      }
      first = false;
    }
    if (isSetImply_view_title()) {
      if (!first) sb.append(", ");
      sb.append("imply_view_title:");
      if (this.imply_view_title == null) {
        sb.append("null");
      } else {
        sb.append(this.imply_view_title);
      }
      first = false;
    }
    if (isSetImply_priority()) {
      if (!first) sb.append(", ");
      sb.append("imply_priority:");
      sb.append(this.imply_priority);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (native_query_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'native_query_id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_sql_query' because it's a primitive and you chose the non-beans generator.
    if (query == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'success' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'creation_time' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'execution_time' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'output_result_size' because it's a primitive and you chose the non-beans generator.
    if (authenticator == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'authenticator' was not present! Struct: " + toString());
    }
    if (stats == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stats' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DruidQueryLogEventStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DruidQueryLogEventStandardScheme getScheme() {
      return new DruidQueryLogEventStandardScheme();
    }
  }

  private static class DruidQueryLogEventStandardScheme extends org.apache.thrift.scheme.StandardScheme<DruidQueryLogEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DruidQueryLogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NATIVE_QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.native_query_id = iprot.readString();
              struct.setNative_query_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SQL_QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_query_id = iprot.readString();
              struct.setSql_query_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role = iprot.readString();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DRUID_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.druid_version = iprot.readString();
              struct.setDruid_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENVIRONMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.environment = iprot.readString();
              struct.setEnvironmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATACENTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datacenter = iprot.readString();
              struct.setDatacenterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLUSTER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster_name = iprot.readString();
              struct.setCluster_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.service_name = iprot.readString();
              struct.setService_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REMOTE_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remote_address = iprot.readString();
              struct.setRemote_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_SQL_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_sql_query = iprot.readBool();
              struct.setIs_sql_queryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATASOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datasource = iprot.readString();
              struct.setDatasourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success = iprot.readBool();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creation_time = iprot.readI64();
              struct.setCreation_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EXECUTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execution_time = iprot.readI64();
              struct.setExecution_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OUTPUT_RESULT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.output_result_size = iprot.readI64();
              struct.setOutput_result_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AUTHENTICATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authenticator = iprot.readString();
              struct.setAuthenticatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stats = iprot.readString();
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IMPLY_DATA_CUBE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imply_data_cube = iprot.readString();
              struct.setImply_data_cubeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IMPLY_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imply_feature = iprot.readString();
              struct.setImply_featureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IMPLY_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imply_user = iprot.readString();
              struct.setImply_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IMPLY_USER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imply_user_email = iprot.readString();
              struct.setImply_user_emailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IMPLY_VIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imply_view = iprot.readString();
              struct.setImply_viewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IMPLY_VIEW_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imply_view_title = iprot.readString();
              struct.setImply_view_titleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IMPLY_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.imply_priority = iprot.readI32();
              struct.setImply_priorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_sql_query()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_sql_query' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSuccess()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'success' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreation_time()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'creation_time' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetExecution_time()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'execution_time' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOutput_result_size()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_result_size' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DruidQueryLogEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.native_query_id != null) {
        oprot.writeFieldBegin(NATIVE_QUERY_ID_FIELD_DESC);
        oprot.writeString(struct.native_query_id);
        oprot.writeFieldEnd();
      }
      if (struct.sql_query_id != null) {
        if (struct.isSetSql_query_id()) {
          oprot.writeFieldBegin(SQL_QUERY_ID_FIELD_DESC);
          oprot.writeString(struct.sql_query_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.role != null) {
        if (struct.isSetRole()) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
      }
      if (struct.druid_version != null) {
        if (struct.isSetDruid_version()) {
          oprot.writeFieldBegin(DRUID_VERSION_FIELD_DESC);
          oprot.writeString(struct.druid_version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.environment != null) {
        if (struct.isSetEnvironment()) {
          oprot.writeFieldBegin(ENVIRONMENT_FIELD_DESC);
          oprot.writeString(struct.environment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.datacenter != null) {
        if (struct.isSetDatacenter()) {
          oprot.writeFieldBegin(DATACENTER_FIELD_DESC);
          oprot.writeString(struct.datacenter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cluster_name != null) {
        if (struct.isSetCluster_name()) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.cluster_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.service_name != null) {
        if (struct.isSetService_name()) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.service_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.host != null) {
        if (struct.isSetHost()) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remote_address != null) {
        if (struct.isSetRemote_address()) {
          oprot.writeFieldBegin(REMOTE_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.remote_address);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_SQL_QUERY_FIELD_DESC);
      oprot.writeBool(struct.is_sql_query);
      oprot.writeFieldEnd();
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      if (struct.datasource != null) {
        if (struct.isSetDatasource()) {
          oprot.writeFieldBegin(DATASOURCE_FIELD_DESC);
          oprot.writeString(struct.datasource);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.success);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATION_TIME_FIELD_DESC);
      oprot.writeI64(struct.creation_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXECUTION_TIME_FIELD_DESC);
      oprot.writeI64(struct.execution_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_RESULT_SIZE_FIELD_DESC);
      oprot.writeI64(struct.output_result_size);
      oprot.writeFieldEnd();
      if (struct.authenticator != null) {
        oprot.writeFieldBegin(AUTHENTICATOR_FIELD_DESC);
        oprot.writeString(struct.authenticator);
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        oprot.writeFieldBegin(STATS_FIELD_DESC);
        oprot.writeString(struct.stats);
        oprot.writeFieldEnd();
      }
      if (struct.imply_data_cube != null) {
        if (struct.isSetImply_data_cube()) {
          oprot.writeFieldBegin(IMPLY_DATA_CUBE_FIELD_DESC);
          oprot.writeString(struct.imply_data_cube);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imply_feature != null) {
        if (struct.isSetImply_feature()) {
          oprot.writeFieldBegin(IMPLY_FEATURE_FIELD_DESC);
          oprot.writeString(struct.imply_feature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imply_user != null) {
        if (struct.isSetImply_user()) {
          oprot.writeFieldBegin(IMPLY_USER_FIELD_DESC);
          oprot.writeString(struct.imply_user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imply_user_email != null) {
        if (struct.isSetImply_user_email()) {
          oprot.writeFieldBegin(IMPLY_USER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.imply_user_email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imply_view != null) {
        if (struct.isSetImply_view()) {
          oprot.writeFieldBegin(IMPLY_VIEW_FIELD_DESC);
          oprot.writeString(struct.imply_view);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imply_view_title != null) {
        if (struct.isSetImply_view_title()) {
          oprot.writeFieldBegin(IMPLY_VIEW_TITLE_FIELD_DESC);
          oprot.writeString(struct.imply_view_title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetImply_priority()) {
        oprot.writeFieldBegin(IMPLY_PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.imply_priority);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DruidQueryLogEventTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DruidQueryLogEventTupleScheme getScheme() {
      return new DruidQueryLogEventTupleScheme();
    }
  }

  private static class DruidQueryLogEventTupleScheme extends org.apache.thrift.scheme.TupleScheme<DruidQueryLogEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DruidQueryLogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.native_query_id);
      oprot.writeBool(struct.is_sql_query);
      oprot.writeString(struct.query);
      oprot.writeBool(struct.success);
      oprot.writeI64(struct.creation_time);
      oprot.writeI64(struct.execution_time);
      oprot.writeI64(struct.output_result_size);
      oprot.writeString(struct.authenticator);
      oprot.writeString(struct.stats);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSql_query_id()) {
        optionals.set(0);
      }
      if (struct.isSetRole()) {
        optionals.set(1);
      }
      if (struct.isSetDruid_version()) {
        optionals.set(2);
      }
      if (struct.isSetEnvironment()) {
        optionals.set(3);
      }
      if (struct.isSetDatacenter()) {
        optionals.set(4);
      }
      if (struct.isSetCluster_name()) {
        optionals.set(5);
      }
      if (struct.isSetService_name()) {
        optionals.set(6);
      }
      if (struct.isSetHost()) {
        optionals.set(7);
      }
      if (struct.isSetRemote_address()) {
        optionals.set(8);
      }
      if (struct.isSetDatasource()) {
        optionals.set(9);
      }
      if (struct.isSetImply_data_cube()) {
        optionals.set(10);
      }
      if (struct.isSetImply_feature()) {
        optionals.set(11);
      }
      if (struct.isSetImply_user()) {
        optionals.set(12);
      }
      if (struct.isSetImply_user_email()) {
        optionals.set(13);
      }
      if (struct.isSetImply_view()) {
        optionals.set(14);
      }
      if (struct.isSetImply_view_title()) {
        optionals.set(15);
      }
      if (struct.isSetImply_priority()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetSql_query_id()) {
        oprot.writeString(struct.sql_query_id);
      }
      if (struct.isSetRole()) {
        oprot.writeString(struct.role);
      }
      if (struct.isSetDruid_version()) {
        oprot.writeString(struct.druid_version);
      }
      if (struct.isSetEnvironment()) {
        oprot.writeString(struct.environment);
      }
      if (struct.isSetDatacenter()) {
        oprot.writeString(struct.datacenter);
      }
      if (struct.isSetCluster_name()) {
        oprot.writeString(struct.cluster_name);
      }
      if (struct.isSetService_name()) {
        oprot.writeString(struct.service_name);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetRemote_address()) {
        oprot.writeString(struct.remote_address);
      }
      if (struct.isSetDatasource()) {
        oprot.writeString(struct.datasource);
      }
      if (struct.isSetImply_data_cube()) {
        oprot.writeString(struct.imply_data_cube);
      }
      if (struct.isSetImply_feature()) {
        oprot.writeString(struct.imply_feature);
      }
      if (struct.isSetImply_user()) {
        oprot.writeString(struct.imply_user);
      }
      if (struct.isSetImply_user_email()) {
        oprot.writeString(struct.imply_user_email);
      }
      if (struct.isSetImply_view()) {
        oprot.writeString(struct.imply_view);
      }
      if (struct.isSetImply_view_title()) {
        oprot.writeString(struct.imply_view_title);
      }
      if (struct.isSetImply_priority()) {
        oprot.writeI32(struct.imply_priority);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DruidQueryLogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.native_query_id = iprot.readString();
      struct.setNative_query_idIsSet(true);
      struct.is_sql_query = iprot.readBool();
      struct.setIs_sql_queryIsSet(true);
      struct.query = iprot.readString();
      struct.setQueryIsSet(true);
      struct.success = iprot.readBool();
      struct.setSuccessIsSet(true);
      struct.creation_time = iprot.readI64();
      struct.setCreation_timeIsSet(true);
      struct.execution_time = iprot.readI64();
      struct.setExecution_timeIsSet(true);
      struct.output_result_size = iprot.readI64();
      struct.setOutput_result_sizeIsSet(true);
      struct.authenticator = iprot.readString();
      struct.setAuthenticatorIsSet(true);
      struct.stats = iprot.readString();
      struct.setStatsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.sql_query_id = iprot.readString();
        struct.setSql_query_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.role = iprot.readString();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.druid_version = iprot.readString();
        struct.setDruid_versionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.environment = iprot.readString();
        struct.setEnvironmentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.datacenter = iprot.readString();
        struct.setDatacenterIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cluster_name = iprot.readString();
        struct.setCluster_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.service_name = iprot.readString();
        struct.setService_nameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remote_address = iprot.readString();
        struct.setRemote_addressIsSet(true);
      }
      if (incoming.get(9)) {
        struct.datasource = iprot.readString();
        struct.setDatasourceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.imply_data_cube = iprot.readString();
        struct.setImply_data_cubeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.imply_feature = iprot.readString();
        struct.setImply_featureIsSet(true);
      }
      if (incoming.get(12)) {
        struct.imply_user = iprot.readString();
        struct.setImply_userIsSet(true);
      }
      if (incoming.get(13)) {
        struct.imply_user_email = iprot.readString();
        struct.setImply_user_emailIsSet(true);
      }
      if (incoming.get(14)) {
        struct.imply_view = iprot.readString();
        struct.setImply_viewIsSet(true);
      }
      if (incoming.get(15)) {
        struct.imply_view_title = iprot.readString();
        struct.setImply_view_titleIsSet(true);
      }
      if (incoming.get(16)) {
        struct.imply_priority = iprot.readI32();
        struct.setImply_priorityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

