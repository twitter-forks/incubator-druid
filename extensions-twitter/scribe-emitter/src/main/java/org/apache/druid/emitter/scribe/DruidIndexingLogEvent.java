/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.druid.emitter.scribe;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2024-10-24")
public class DruidIndexingLogEvent implements org.apache.thrift.TBase<DruidIndexingLogEvent, DruidIndexingLogEvent._Fields>, java.io.Serializable, Cloneable, Comparable<DruidIndexingLogEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DruidIndexingLogEvent");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("task_type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATASOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("datasource", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TASK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("task_status", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("creation_time", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DRUID_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("druid_version", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ENVIRONMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("environment", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DATACENTER_FIELD_DESC = new org.apache.thrift.protocol.TField("datacenter", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster_name", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DruidIndexingLogEventStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DruidIndexingLogEventTupleSchemeFactory();

  public java.lang.String task_id; // required
  public java.lang.String task_type; // required
  public java.lang.String datasource; // required
  public java.lang.String task_status; // required
  public long duration; // required
  public long creation_time; // required
  public java.lang.String owner; // required
  public java.lang.String role; // optional
  public java.lang.String druid_version; // optional
  public java.lang.String environment; // optional
  public java.lang.String datacenter; // optional
  public java.lang.String cluster_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "task_id"),
    TASK_TYPE((short)2, "task_type"),
    DATASOURCE((short)3, "datasource"),
    TASK_STATUS((short)4, "task_status"),
    DURATION((short)5, "duration"),
    CREATION_TIME((short)6, "creation_time"),
    OWNER((short)7, "owner"),
    ROLE((short)8, "role"),
    DRUID_VERSION((short)9, "druid_version"),
    ENVIRONMENT((short)10, "environment"),
    DATACENTER((short)11, "datacenter"),
    CLUSTER_NAME((short)12, "cluster_name");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // DATASOURCE
          return DATASOURCE;
        case 4: // TASK_STATUS
          return TASK_STATUS;
        case 5: // DURATION
          return DURATION;
        case 6: // CREATION_TIME
          return CREATION_TIME;
        case 7: // OWNER
          return OWNER;
        case 8: // ROLE
          return ROLE;
        case 9: // DRUID_VERSION
          return DRUID_VERSION;
        case 10: // ENVIRONMENT
          return ENVIRONMENT;
        case 11: // DATACENTER
          return DATACENTER;
        case 12: // CLUSTER_NAME
          return CLUSTER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DURATION_ISSET_ID = 0;
  private static final int __CREATION_TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ROLE,_Fields.DRUID_VERSION,_Fields.ENVIRONMENT,_Fields.DATACENTER,_Fields.CLUSTER_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("task_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASOURCE, new org.apache.thrift.meta_data.FieldMetaData("datasource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("task_status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("creation_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRUID_VERSION, new org.apache.thrift.meta_data.FieldMetaData("druid_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENVIRONMENT, new org.apache.thrift.meta_data.FieldMetaData("environment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATACENTER, new org.apache.thrift.meta_data.FieldMetaData("datacenter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("cluster_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DruidIndexingLogEvent.class, metaDataMap);
  }

  public DruidIndexingLogEvent() {
  }

  public DruidIndexingLogEvent(
    java.lang.String task_id,
    java.lang.String task_type,
    java.lang.String datasource,
    java.lang.String task_status,
    long duration,
    long creation_time,
    java.lang.String owner)
  {
    this();
    this.task_id = task_id;
    this.task_type = task_type;
    this.datasource = datasource;
    this.task_status = task_status;
    this.duration = duration;
    setDurationIsSet(true);
    this.creation_time = creation_time;
    setCreation_timeIsSet(true);
    this.owner = owner;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DruidIndexingLogEvent(DruidIndexingLogEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTask_id()) {
      this.task_id = other.task_id;
    }
    if (other.isSetTask_type()) {
      this.task_type = other.task_type;
    }
    if (other.isSetDatasource()) {
      this.datasource = other.datasource;
    }
    if (other.isSetTask_status()) {
      this.task_status = other.task_status;
    }
    this.duration = other.duration;
    this.creation_time = other.creation_time;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetRole()) {
      this.role = other.role;
    }
    if (other.isSetDruid_version()) {
      this.druid_version = other.druid_version;
    }
    if (other.isSetEnvironment()) {
      this.environment = other.environment;
    }
    if (other.isSetDatacenter()) {
      this.datacenter = other.datacenter;
    }
    if (other.isSetCluster_name()) {
      this.cluster_name = other.cluster_name;
    }
  }

  public DruidIndexingLogEvent deepCopy() {
    return new DruidIndexingLogEvent(this);
  }

  @Override
  public void clear() {
    this.task_id = null;
    this.task_type = null;
    this.datasource = null;
    this.task_status = null;
    setDurationIsSet(false);
    this.duration = 0;
    setCreation_timeIsSet(false);
    this.creation_time = 0;
    this.owner = null;
    this.role = null;
    this.druid_version = null;
    this.environment = null;
    this.datacenter = null;
    this.cluster_name = null;
  }

  public java.lang.String getTask_id() {
    return this.task_id;
  }

  public DruidIndexingLogEvent setTask_id(java.lang.String task_id) {
    this.task_id = task_id;
    return this;
  }

  public void unsetTask_id() {
    this.task_id = null;
  }

  /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_id() {
    return this.task_id != null;
  }

  public void setTask_idIsSet(boolean value) {
    if (!value) {
      this.task_id = null;
    }
  }

  public java.lang.String getTask_type() {
    return this.task_type;
  }

  public DruidIndexingLogEvent setTask_type(java.lang.String task_type) {
    this.task_type = task_type;
    return this;
  }

  public void unsetTask_type() {
    this.task_type = null;
  }

  /** Returns true if field task_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_type() {
    return this.task_type != null;
  }

  public void setTask_typeIsSet(boolean value) {
    if (!value) {
      this.task_type = null;
    }
  }

  public java.lang.String getDatasource() {
    return this.datasource;
  }

  public DruidIndexingLogEvent setDatasource(java.lang.String datasource) {
    this.datasource = datasource;
    return this;
  }

  public void unsetDatasource() {
    this.datasource = null;
  }

  /** Returns true if field datasource is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasource() {
    return this.datasource != null;
  }

  public void setDatasourceIsSet(boolean value) {
    if (!value) {
      this.datasource = null;
    }
  }

  public java.lang.String getTask_status() {
    return this.task_status;
  }

  public DruidIndexingLogEvent setTask_status(java.lang.String task_status) {
    this.task_status = task_status;
    return this;
  }

  public void unsetTask_status() {
    this.task_status = null;
  }

  /** Returns true if field task_status is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_status() {
    return this.task_status != null;
  }

  public void setTask_statusIsSet(boolean value) {
    if (!value) {
      this.task_status = null;
    }
  }

  public long getDuration() {
    return this.duration;
  }

  public DruidIndexingLogEvent setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public long getCreation_time() {
    return this.creation_time;
  }

  public DruidIndexingLogEvent setCreation_time(long creation_time) {
    this.creation_time = creation_time;
    setCreation_timeIsSet(true);
    return this;
  }

  public void unsetCreation_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATION_TIME_ISSET_ID);
  }

  /** Returns true if field creation_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreation_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATION_TIME_ISSET_ID);
  }

  public void setCreation_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATION_TIME_ISSET_ID, value);
  }

  public java.lang.String getOwner() {
    return this.owner;
  }

  public DruidIndexingLogEvent setOwner(java.lang.String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public java.lang.String getRole() {
    return this.role;
  }

  public DruidIndexingLogEvent setRole(java.lang.String role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public java.lang.String getDruid_version() {
    return this.druid_version;
  }

  public DruidIndexingLogEvent setDruid_version(java.lang.String druid_version) {
    this.druid_version = druid_version;
    return this;
  }

  public void unsetDruid_version() {
    this.druid_version = null;
  }

  /** Returns true if field druid_version is set (has been assigned a value) and false otherwise */
  public boolean isSetDruid_version() {
    return this.druid_version != null;
  }

  public void setDruid_versionIsSet(boolean value) {
    if (!value) {
      this.druid_version = null;
    }
  }

  public java.lang.String getEnvironment() {
    return this.environment;
  }

  public DruidIndexingLogEvent setEnvironment(java.lang.String environment) {
    this.environment = environment;
    return this;
  }

  public void unsetEnvironment() {
    this.environment = null;
  }

  /** Returns true if field environment is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvironment() {
    return this.environment != null;
  }

  public void setEnvironmentIsSet(boolean value) {
    if (!value) {
      this.environment = null;
    }
  }

  public java.lang.String getDatacenter() {
    return this.datacenter;
  }

  public DruidIndexingLogEvent setDatacenter(java.lang.String datacenter) {
    this.datacenter = datacenter;
    return this;
  }

  public void unsetDatacenter() {
    this.datacenter = null;
  }

  /** Returns true if field datacenter is set (has been assigned a value) and false otherwise */
  public boolean isSetDatacenter() {
    return this.datacenter != null;
  }

  public void setDatacenterIsSet(boolean value) {
    if (!value) {
      this.datacenter = null;
    }
  }

  public java.lang.String getCluster_name() {
    return this.cluster_name;
  }

  public DruidIndexingLogEvent setCluster_name(java.lang.String cluster_name) {
    this.cluster_name = cluster_name;
    return this;
  }

  public void unsetCluster_name() {
    this.cluster_name = null;
  }

  /** Returns true if field cluster_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster_name() {
    return this.cluster_name != null;
  }

  public void setCluster_nameIsSet(boolean value) {
    if (!value) {
      this.cluster_name = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTask_id();
      } else {
        setTask_id((java.lang.String)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTask_type();
      } else {
        setTask_type((java.lang.String)value);
      }
      break;

    case DATASOURCE:
      if (value == null) {
        unsetDatasource();
      } else {
        setDatasource((java.lang.String)value);
      }
      break;

    case TASK_STATUS:
      if (value == null) {
        unsetTask_status();
      } else {
        setTask_status((java.lang.String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((java.lang.Long)value);
      }
      break;

    case CREATION_TIME:
      if (value == null) {
        unsetCreation_time();
      } else {
        setCreation_time((java.lang.Long)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((java.lang.String)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((java.lang.String)value);
      }
      break;

    case DRUID_VERSION:
      if (value == null) {
        unsetDruid_version();
      } else {
        setDruid_version((java.lang.String)value);
      }
      break;

    case ENVIRONMENT:
      if (value == null) {
        unsetEnvironment();
      } else {
        setEnvironment((java.lang.String)value);
      }
      break;

    case DATACENTER:
      if (value == null) {
        unsetDatacenter();
      } else {
        setDatacenter((java.lang.String)value);
      }
      break;

    case CLUSTER_NAME:
      if (value == null) {
        unsetCluster_name();
      } else {
        setCluster_name((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTask_id();

    case TASK_TYPE:
      return getTask_type();

    case DATASOURCE:
      return getDatasource();

    case TASK_STATUS:
      return getTask_status();

    case DURATION:
      return getDuration();

    case CREATION_TIME:
      return getCreation_time();

    case OWNER:
      return getOwner();

    case ROLE:
      return getRole();

    case DRUID_VERSION:
      return getDruid_version();

    case ENVIRONMENT:
      return getEnvironment();

    case DATACENTER:
      return getDatacenter();

    case CLUSTER_NAME:
      return getCluster_name();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTask_id();
    case TASK_TYPE:
      return isSetTask_type();
    case DATASOURCE:
      return isSetDatasource();
    case TASK_STATUS:
      return isSetTask_status();
    case DURATION:
      return isSetDuration();
    case CREATION_TIME:
      return isSetCreation_time();
    case OWNER:
      return isSetOwner();
    case ROLE:
      return isSetRole();
    case DRUID_VERSION:
      return isSetDruid_version();
    case ENVIRONMENT:
      return isSetEnvironment();
    case DATACENTER:
      return isSetDatacenter();
    case CLUSTER_NAME:
      return isSetCluster_name();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DruidIndexingLogEvent)
      return this.equals((DruidIndexingLogEvent)that);
    return false;
  }

  public boolean equals(DruidIndexingLogEvent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_task_id = true && this.isSetTask_id();
    boolean that_present_task_id = true && that.isSetTask_id();
    if (this_present_task_id || that_present_task_id) {
      if (!(this_present_task_id && that_present_task_id))
        return false;
      if (!this.task_id.equals(that.task_id))
        return false;
    }

    boolean this_present_task_type = true && this.isSetTask_type();
    boolean that_present_task_type = true && that.isSetTask_type();
    if (this_present_task_type || that_present_task_type) {
      if (!(this_present_task_type && that_present_task_type))
        return false;
      if (!this.task_type.equals(that.task_type))
        return false;
    }

    boolean this_present_datasource = true && this.isSetDatasource();
    boolean that_present_datasource = true && that.isSetDatasource();
    if (this_present_datasource || that_present_datasource) {
      if (!(this_present_datasource && that_present_datasource))
        return false;
      if (!this.datasource.equals(that.datasource))
        return false;
    }

    boolean this_present_task_status = true && this.isSetTask_status();
    boolean that_present_task_status = true && that.isSetTask_status();
    if (this_present_task_status || that_present_task_status) {
      if (!(this_present_task_status && that_present_task_status))
        return false;
      if (!this.task_status.equals(that.task_status))
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_creation_time = true;
    boolean that_present_creation_time = true;
    if (this_present_creation_time || that_present_creation_time) {
      if (!(this_present_creation_time && that_present_creation_time))
        return false;
      if (this.creation_time != that.creation_time)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_druid_version = true && this.isSetDruid_version();
    boolean that_present_druid_version = true && that.isSetDruid_version();
    if (this_present_druid_version || that_present_druid_version) {
      if (!(this_present_druid_version && that_present_druid_version))
        return false;
      if (!this.druid_version.equals(that.druid_version))
        return false;
    }

    boolean this_present_environment = true && this.isSetEnvironment();
    boolean that_present_environment = true && that.isSetEnvironment();
    if (this_present_environment || that_present_environment) {
      if (!(this_present_environment && that_present_environment))
        return false;
      if (!this.environment.equals(that.environment))
        return false;
    }

    boolean this_present_datacenter = true && this.isSetDatacenter();
    boolean that_present_datacenter = true && that.isSetDatacenter();
    if (this_present_datacenter || that_present_datacenter) {
      if (!(this_present_datacenter && that_present_datacenter))
        return false;
      if (!this.datacenter.equals(that.datacenter))
        return false;
    }

    boolean this_present_cluster_name = true && this.isSetCluster_name();
    boolean that_present_cluster_name = true && that.isSetCluster_name();
    if (this_present_cluster_name || that_present_cluster_name) {
      if (!(this_present_cluster_name && that_present_cluster_name))
        return false;
      if (!this.cluster_name.equals(that.cluster_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTask_id()) ? 131071 : 524287);
    if (isSetTask_id())
      hashCode = hashCode * 8191 + task_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTask_type()) ? 131071 : 524287);
    if (isSetTask_type())
      hashCode = hashCode * 8191 + task_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatasource()) ? 131071 : 524287);
    if (isSetDatasource())
      hashCode = hashCode * 8191 + datasource.hashCode();

    hashCode = hashCode * 8191 + ((isSetTask_status()) ? 131071 : 524287);
    if (isSetTask_status())
      hashCode = hashCode * 8191 + task_status.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(duration);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(creation_time);

    hashCode = hashCode * 8191 + ((isSetOwner()) ? 131071 : 524287);
    if (isSetOwner())
      hashCode = hashCode * 8191 + owner.hashCode();

    hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
    if (isSetRole())
      hashCode = hashCode * 8191 + role.hashCode();

    hashCode = hashCode * 8191 + ((isSetDruid_version()) ? 131071 : 524287);
    if (isSetDruid_version())
      hashCode = hashCode * 8191 + druid_version.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnvironment()) ? 131071 : 524287);
    if (isSetEnvironment())
      hashCode = hashCode * 8191 + environment.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatacenter()) ? 131071 : 524287);
    if (isSetDatacenter())
      hashCode = hashCode * 8191 + datacenter.hashCode();

    hashCode = hashCode * 8191 + ((isSetCluster_name()) ? 131071 : 524287);
    if (isSetCluster_name())
      hashCode = hashCode * 8191 + cluster_name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DruidIndexingLogEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTask_type()).compareTo(other.isSetTask_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_type, other.task_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatasource()).compareTo(other.isSetDatasource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasource, other.datasource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTask_status()).compareTo(other.isSetTask_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_status, other.task_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreation_time()).compareTo(other.isSetCreation_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreation_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creation_time, other.creation_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDruid_version()).compareTo(other.isSetDruid_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDruid_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.druid_version, other.druid_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnvironment()).compareTo(other.isSetEnvironment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvironment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.environment, other.environment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatacenter()).compareTo(other.isSetDatacenter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatacenter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datacenter, other.datacenter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCluster_name()).compareTo(other.isSetCluster_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster_name, other.cluster_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DruidIndexingLogEvent(");
    boolean first = true;

    sb.append("task_id:");
    if (this.task_id == null) {
      sb.append("null");
    } else {
      sb.append(this.task_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_type:");
    if (this.task_type == null) {
      sb.append("null");
    } else {
      sb.append(this.task_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasource:");
    if (this.datasource == null) {
      sb.append("null");
    } else {
      sb.append(this.datasource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_status:");
    if (this.task_status == null) {
      sb.append("null");
    } else {
      sb.append(this.task_status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creation_time:");
    sb.append(this.creation_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (isSetRole()) {
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
    }
    if (isSetDruid_version()) {
      if (!first) sb.append(", ");
      sb.append("druid_version:");
      if (this.druid_version == null) {
        sb.append("null");
      } else {
        sb.append(this.druid_version);
      }
      first = false;
    }
    if (isSetEnvironment()) {
      if (!first) sb.append(", ");
      sb.append("environment:");
      if (this.environment == null) {
        sb.append("null");
      } else {
        sb.append(this.environment);
      }
      first = false;
    }
    if (isSetDatacenter()) {
      if (!first) sb.append(", ");
      sb.append("datacenter:");
      if (this.datacenter == null) {
        sb.append("null");
      } else {
        sb.append(this.datacenter);
      }
      first = false;
    }
    if (isSetCluster_name()) {
      if (!first) sb.append(", ");
      sb.append("cluster_name:");
      if (this.cluster_name == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (task_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_id' was not present! Struct: " + toString());
    }
    if (task_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_type' was not present! Struct: " + toString());
    }
    if (datasource == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'datasource' was not present! Struct: " + toString());
    }
    if (task_status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_status' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'duration' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'creation_time' because it's a primitive and you chose the non-beans generator.
    if (owner == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'owner' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DruidIndexingLogEventStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DruidIndexingLogEventStandardScheme getScheme() {
      return new DruidIndexingLogEventStandardScheme();
    }
  }

  private static class DruidIndexingLogEventStandardScheme extends org.apache.thrift.scheme.StandardScheme<DruidIndexingLogEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DruidIndexingLogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_id = iprot.readString();
              struct.setTask_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_type = iprot.readString();
              struct.setTask_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATASOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datasource = iprot.readString();
              struct.setDatasourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_status = iprot.readString();
              struct.setTask_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creation_time = iprot.readI64();
              struct.setCreation_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role = iprot.readString();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DRUID_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.druid_version = iprot.readString();
              struct.setDruid_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENVIRONMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.environment = iprot.readString();
              struct.setEnvironmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATACENTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datacenter = iprot.readString();
              struct.setDatacenterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLUSTER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster_name = iprot.readString();
              struct.setCluster_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDuration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'duration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreation_time()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'creation_time' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DruidIndexingLogEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.task_id != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeString(struct.task_id);
        oprot.writeFieldEnd();
      }
      if (struct.task_type != null) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeString(struct.task_type);
        oprot.writeFieldEnd();
      }
      if (struct.datasource != null) {
        oprot.writeFieldBegin(DATASOURCE_FIELD_DESC);
        oprot.writeString(struct.datasource);
        oprot.writeFieldEnd();
      }
      if (struct.task_status != null) {
        oprot.writeFieldBegin(TASK_STATUS_FIELD_DESC);
        oprot.writeString(struct.task_status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI64(struct.duration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATION_TIME_FIELD_DESC);
      oprot.writeI64(struct.creation_time);
      oprot.writeFieldEnd();
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.role != null) {
        if (struct.isSetRole()) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
      }
      if (struct.druid_version != null) {
        if (struct.isSetDruid_version()) {
          oprot.writeFieldBegin(DRUID_VERSION_FIELD_DESC);
          oprot.writeString(struct.druid_version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.environment != null) {
        if (struct.isSetEnvironment()) {
          oprot.writeFieldBegin(ENVIRONMENT_FIELD_DESC);
          oprot.writeString(struct.environment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.datacenter != null) {
        if (struct.isSetDatacenter()) {
          oprot.writeFieldBegin(DATACENTER_FIELD_DESC);
          oprot.writeString(struct.datacenter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cluster_name != null) {
        if (struct.isSetCluster_name()) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.cluster_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DruidIndexingLogEventTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DruidIndexingLogEventTupleScheme getScheme() {
      return new DruidIndexingLogEventTupleScheme();
    }
  }

  private static class DruidIndexingLogEventTupleScheme extends org.apache.thrift.scheme.TupleScheme<DruidIndexingLogEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DruidIndexingLogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.task_id);
      oprot.writeString(struct.task_type);
      oprot.writeString(struct.datasource);
      oprot.writeString(struct.task_status);
      oprot.writeI64(struct.duration);
      oprot.writeI64(struct.creation_time);
      oprot.writeString(struct.owner);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRole()) {
        optionals.set(0);
      }
      if (struct.isSetDruid_version()) {
        optionals.set(1);
      }
      if (struct.isSetEnvironment()) {
        optionals.set(2);
      }
      if (struct.isSetDatacenter()) {
        optionals.set(3);
      }
      if (struct.isSetCluster_name()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRole()) {
        oprot.writeString(struct.role);
      }
      if (struct.isSetDruid_version()) {
        oprot.writeString(struct.druid_version);
      }
      if (struct.isSetEnvironment()) {
        oprot.writeString(struct.environment);
      }
      if (struct.isSetDatacenter()) {
        oprot.writeString(struct.datacenter);
      }
      if (struct.isSetCluster_name()) {
        oprot.writeString(struct.cluster_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DruidIndexingLogEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.task_id = iprot.readString();
      struct.setTask_idIsSet(true);
      struct.task_type = iprot.readString();
      struct.setTask_typeIsSet(true);
      struct.datasource = iprot.readString();
      struct.setDatasourceIsSet(true);
      struct.task_status = iprot.readString();
      struct.setTask_statusIsSet(true);
      struct.duration = iprot.readI64();
      struct.setDurationIsSet(true);
      struct.creation_time = iprot.readI64();
      struct.setCreation_timeIsSet(true);
      struct.owner = iprot.readString();
      struct.setOwnerIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.role = iprot.readString();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.druid_version = iprot.readString();
        struct.setDruid_versionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.environment = iprot.readString();
        struct.setEnvironmentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.datacenter = iprot.readString();
        struct.setDatacenterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cluster_name = iprot.readString();
        struct.setCluster_nameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

